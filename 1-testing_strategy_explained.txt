1. White box testing

   Both the 'Parser' and the 'Interpreter' define a function 'void testing_strategy(void)'; in this testing function, every functions(units) used (as .h files include) are tested by creating some feed-in and using assert() to see if outcomes are as expected. (Please see test_parser.c and test_interpreter.c for the definition of 'void testing_strategy(void)'.)

2. Black box testing

   In both 'Parser' and 'Interpreter', several turtle-program .txt files are given, both right and wrong programs. turtle_1.txt, turtle_2.txt, turtle_3.txt and turtle_4.txt are the ones in the assignment sheet on Blackboard. Just use file name as the second argument in the command line. In the parser, outcome should be "Parsed OK", while outcomes of Interpreter are the same as those in the assignment sheet. (But my turtle are initially set horizental, so outcomes are 90 degree different)
   turtle_wrong_1.txt, turtle_wrong_2.txt and turtle_wrong_3.txt are 3 turtle programs with wrong syntax. Using their names as second argument of command line should give result of "Failed" but not "Parsed OK".
   turtle_1.txt, turtle_2.txt,..., turtle_10.txt are sample turtle programs. Their drawings are uploaded as jpg. 

   a) turtle_1.txt, turtle_2.txt, turtle_3.txt, turtle_4.txt
      They give the same results as assignment sheet

   b) turtle_7.txt
      Testing 3 nested loop.

   c) extension_turtle_8.txt
      Testing instruction "MOV"
   
   d) extension_turtle_9.txt
      Testing instruction "COLOR"

   e) extension_turtle_10.txt
      Testing instruction "HOME"

   f) extension_turtle_11.txt
      Testing instruction "IF"
   
   g) turtle_5.txt, turtle_6.txt
      They are additional samples for fun

   h) turtle_wrong_1.txt, turtle_wrong_2.txt, turtle_wrong_3.txt
      They are turtle programs with wrong syntax

3. About the "DO" instruction and 'Interpreter'

   Because one FD instruction maybe parsed several more times than its needed execution when it is nested in a DO instruction, I used a 'switch' for the turtle. Switch are only on when drawing is needed. Before deciding if the rest (after '{') of a DO instruction is an instruction list, I copy the turtle structure out and set its 'switch' off, and call 'is_instruction' using this copy as argument (Thus no drawing). If it's true then I used a for loop to call 'is_instruction' for numbers of times that is need, but with the original turtle as argument ('swtich' is on, thus do drawing).   
   To see if "Turtle Instructions" are executed in right sequence, I print someting after each instruction. For example, after FD draws, printf("FD %f", distance). And also I print the symbol table after each FD drawing to keep track of variables (Like the 'A' in 'DO A FROM 1 TO 8').




